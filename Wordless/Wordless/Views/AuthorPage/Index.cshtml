@model Wordless.ViewModel.AuthorPageViewModel
@using Wordless.ViewModel
@using Wordless.Models

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<div class="form-horizontal row">
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
        <h2>Filter</h2>
        <form role="form" action="~/AuthorPage/Index" method="post">
            @Html.AntiForgeryToken()
            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                @Html.LabelFor(m => m.Keyword)
                @Html.TextBoxFor(m => m.Keyword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Keyword)
            </div>
            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Title)
            </div>
            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                @Html.LabelFor(m => m.TimesPurchased)
                @Html.TextBoxFor(m => m.TimesPurchased, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.TimesPurchased)
            </div>
            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                @Html.LabelFor(m => m.Price)
                @Html.TextBoxFor(m => m.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Price)
            </div>
            <div class="form-group col-md-offset-2 col-md-10">
                <input type="submit" value="Filter" class="btn btn-default" />
            </div>
        </form>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
        @{
            if (Model.BooksResult.Count() > 0)
            {
                <h2>Found <strong>@Model.BooksResult.Count()</strong> properties</h2>
                @Html.Raw("<div class = 'books'>");
                foreach (Book b in Model.BooksResult)
                {
                    @Html.Raw("<div>");
                    @Html.Raw("<strong>" + b.Title + "</strong><br />");
                    @Html.Raw("TimesPurchased: " + b.TimesPurchased + "<br />");
                    @Html.Raw("Price: &#36;" + b.Price + "<br />");
                    @Html.ActionLink("Edit", "Edit", new { id = b.BookId })
                    @Html.Raw("<br />")
                    @Html.ActionLink("Details", "Details", new { id = b.BookId })
                    @Html.Raw("<br />")
                    @Html.ActionLink("Delete", "Delete", new { id = b.BookId })
                    @Html.Raw("</div>")
                    @Html.Raw("<br />")
                }
                @Html.Raw("</div>")
            }

            else
            {
                <h2>Sorry!</h2>
                <p>No books could be found =(</p>
            }
        }

    </div>
</div>