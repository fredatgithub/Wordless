@model IEnumerable<Wordless.Models.Book>

@{
    ViewBag.Title = "Index";
}

<body>
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <div class="bodyDiv">
                    <div class="header-Text">
                        <header class="text-center" style="font-size:32px" id="Welcome">Welcome to Wordless!</header>
                        <div class="col-sm-10 col-sm-offset-1 col-md-10 col-md-offset-1 col-lg-10 col-lg-offset-1">
                            <p class="text-center  ">
                                This is the home for unpublished writer and soon to be shooting stars in the book industry. Our goal is to spread novels and writings from
                                seamingly unkown Authors so that their work can be known to the world. We offer a place on the internet for authors to upload books and for a
                                small sum allow interested readers to access their work. Hopefully this will be a way for authors to get published later on.
                            </p>

                            @*<div class="col-xs-12 col-sm-1 col-md-1 col-lg-1"></div>*@
                            <p></p>

                            <p class="text-center col-xs-12 col-sm-12 col-md-12 col-lg-12">With that being said, neither more or less</p>
                            <p class="text-center col-xs-12 col-sm-12 col-md-12 col-lg-12"> Welcome to Wordless</p>
                            <p></p>
                            <br /><br /><br />
                            <h4 class="text-center">Now my only question to you is:</h4>
                            <h2 class="text-center">Are you our next Author?</h2>
                        </div>
                    </div>
                    <div class="main-Content" id="Main">
                        <div id="playerDiv">
                            <div class="col-lg-12 col-md-12  col-sm-12  col-xs-12" id="player"></div>
                        </div>

                        <h2 class="text-center label-warning">News</h2>
                        <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
                        <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="sidebar-Top sidebar-nav hidden-sm hidden-xs">
                    @{
                        var mostDownloadedList = Session["MostDownloaded"] as List<Wordless.Models.Book>;
                    }
                    @if (mostDownloadedList.Count > 0)
                    {
                        <p class="sidebar-name">Most downloaded</p>
                        foreach (var book in mostDownloadedList)
                        {
                            
                            <ul class="sidebar-list">
                                <li><a href="@Url.Action("BuyBook", "Book", new { bookId = book.BookId })"><span class="glyphicon glyphicon-book"></span><strong> @book.Title</strong></a></li>
                                <li class="sidebar-list-text-author">Written by: @book.Author.Name</li>
                                <li>@book.TimesPurchased <span class="glyphicon glyphicon-credit-card"></span></li>
                            </ul>
                        }
                    }
                    
                </div>
                <div class="sidebar-mid-bot sidebar-nav hidden-sm hidden-xs">
                    @{
                        var bestRatedList = Session["BestRating"] as List<Wordless.Models.PurchasedBook>;
                    }
                    @if (bestRatedList.Count > 0)
                    {
                        <p class="sidebar-name">Best rating</p>
                        foreach (var item in bestRatedList)
                        {
                            <ul class="sidebar-list">
                                <li><a href="@Url.Action("BuyBook", "Book", new { bookId = item.BookId })"><span class="glyphicon glyphicon-book"></span><strong> @item.Book.Title</strong></a></li>
                                <li class="sidebar-list-text-author">Written by: @item.Book.Author.Name</li>
                                <li>@item.Rating <span class="glyphicon glyphicon-star"></span></li>
                            </ul>
                        }
                    }
                </div>
                <div class="sidebar-mid-bot sidebar-nav hidden-sm hidden-xs">
                    @{
                        var mostCommentedList = Session["MostCommented"] as List<Wordless.Models.Book>;
                    }
                    @if (mostCommentedList.Count() > 0)
                    {
                        <p class="sidebar-name">Most commented</p>
                        foreach (var book in mostCommentedList)
                        {
                            <ul class="sidebar-list">
                                <li><a href="@Url.Action("BuyBook", "Book", new { bookId = book.BookId })"><span class="glyphicon glyphicon-book"></span><strong> @book.Title</strong></a></li>
                                <li class="sidebar-list-text-author">Written by: @book.Author.Name</li>
                                <li>@book.Comments.Count() <span class="glyphicon glyphicon-comment"></span></li>
                            </ul>
                        }
                    }
                    
                </div>
            </div>
        </div>
    </div>

</body>
<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->


<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: 'AYvOSrgvCrk',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>

<!--TEMPORARY VIEW TO SHOW BOOKS-->
@*@if (Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    <div class="container-narrow">
                        <div class="row rowfix">
                            <div class="col-sm-12 divnews">
                                <h2><strong>@item.Title</strong></h2>
                                <div id="divtext">
                                    <p>By: @item.Author.Name</p>
                                </div>
                                <p>@item.BookText</p>
                                <p>@item.Genre</p>
                                <p>Price: @item.Price</p>
                                <p>No. of downloads: @item.TimesPurchased</p>
                                <p>Kommentarer:</p>
                                @foreach (var comment in @item.Comments)
                        {
                                    <p> @comment.CommentText</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>*@
